{
    "analysis_tasks": [
        {
            "task": "FiducialCorrelationWarp",
            "module": "merlin.analysis.warp",
            "parameters": {
                "write_fiducial_images": true
            }
        },
        {
            "task": "DeconvolutionPreprocess",
            "module": "merlin.analysis.preprocess",
            "parameters": {
                "warp_task": "FiducialCorrelationWarp",
                "highpass_sigma": 2,
                "decon_sigma": 1.4,
                "decon_iterations": 10,
                "decon_filter_size": 9 
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize1",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize2",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize1",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize3",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize2",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize4",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize3",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize5",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize4",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize6",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize5",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize7",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize6",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize8",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize7",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize9",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize8",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize10",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize9",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "Decode",
            "module": "merlin.analysis.decode",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize10",
                "global_align_task": "SimpleGlobalAlignment",
                "minimum_area": 1,
                "lowpass_sigma": 0.6,
                "crop_width": 80
            }
        },
        {
            "task": "SimpleGlobalAlignment",
            "module": "merlin.analysis.globalalign"
        },
        {
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "parameters": {
                "global_align_task": "SimpleGlobalAlignment",
                "warp_task": "FiducialCorrelationWarp",
                "data_channels": ["DAPI", "polyT"]
            }
        },
        {
            "task": "PlotPerformance",
            "module": "merlin.analysis.plotperformance",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize10",
                "decode_task": "Decode",
                "filter_task": "AdaptiveFilterBarcodes",
                "sum_task": "ExportSumSignals",
                "partition_task": "PartitionBarcodes",
                "segment_task": "AssignCellFOV",
                "global_align_task": "SimpleGlobalAlignment"
            }
        },
        {
            "task": "ExportBarcodes",
            "module": "merlin.analysis.exportbarcodes",
            "parameters": {
                "filter_task": "AdaptiveFilterBarcodes",
                "columns": ["barcode_id", "global_x", "global_y", "global_z",
                    "x", "y", "fov"]
            }
        },
        {
            "task": "WatershedSegment",
            "module": "merlin.analysis.segment",
            "parameters": {
                "warp_task": "FiducialCorrelationWarp",
                "global_align_task": "SimpleGlobalAlignment"
            }
        },
        {
            "task": "SumSignal",
            "module": "merlin.analysis.sequential",
            "parameters": {
                "z_index": 3,
                "apply_highpass": true,
                "warp_task": "FiducialCorrelationWarp",
                "highpass_sigma": 5,
                "segment_task": "AssignCellFOV",
                "global_align_task": "SimpleGlobalAlignment"
            }
        },
        {
            "task": "ExportSumSignals",
            "module": "merlin.analysis.sequential",
            "parameters": {
                "sequential_task": "SumSignal"
            }
        },
        {
            "task": "AssignCellFOV",
            "module": "merlin.analysis.segment",
            "parameters": {
                "segment_task": "WatershedSegment",
                "global_align_task": "SimpleGlobalAlignment"
            }
        },
        {
            "task": "PartitionBarcodes",
            "module": "merlin.analysis.partition",
            "parameters": {
                "filter_task": "AdaptiveFilterBarcodes",
                "assignment_task": "AssignCellFOV"
            }
        },
        {
            "task": "ExportPartitionedBarcodes",
            "module": "merlin.analysis.partition",
            "parameters": {
                "partition_task": "PartitionBarcodes"
            }
        },
        {
            "task": "ExportCellMetadata",
            "module": "merlin.analysis.segment",
            "parameters": {
                "segment_task": "AssignCellFOV"
            }
        },
        {
            "task": "GenerateAdaptiveThreshold",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "run_after_task": "Optimize10"
            }
        },
        {
            "task": "AdaptiveFilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "adaptive_task": "GenerateAdaptiveThreshold"
            }
        },
        {
            "task": "SlurmReport",
            "module": "merlin.analysis.slurmreport",
            "parameters": {
                "run_after_task": "ExportPartitionedBarcodes"
            }
        }
    ]

}
